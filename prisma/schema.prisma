generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Projeto {
  id                 String         @id @default(uuid()) @db.Uuid
  nome               String         @db.VarChar(255)
  descricao          String?
  inicio             DateTime?      @db.Date
  fim                DateTime?      @db.Date
  estado             ProjetoEstado  @default(PENDENTE)
  overhead           Decimal?       @default(0) @db.Decimal(5, 2)
  taxa_financiamento Decimal?       @default(0) @db.Decimal(5, 2)
  valor_eti          Decimal?       @default(0) @db.Decimal(10, 2)
  financiamentoId    Int?           @map("financiamento_id")
  responsavelId      String?        @map("responsavel_id")
  aprovado           Json?
  tipo               ProjetoTipo    @default(STANDARD)
  financiamento      Financiamento? @relation(fields: [financiamentoId], references: [id])
  responsavel        User?          @relation("ProjetosResponsavel", fields: [responsavelId], references: [id])
  workpackages       Workpackage[]  @relation("ProjetoWorkpackages")

  @@map("Projetos")
}

model Financiamento {
  id                 Int       @id @default(autoincrement())
  nome               String    @unique @db.VarChar(255)
  overhead           Decimal   @db.Decimal(5, 2)
  taxa_financiamento Decimal   @db.Decimal(5, 2)
  valor_eti          Decimal   @db.Decimal(10, 2)
  projetos           Projeto[]

  @@map("Financiamentos")
}

model Workpackage {
  id        String            @id @default(uuid()) @db.Uuid
  projetoId String            @map("projeto_id") @db.Uuid
  nome      String            @db.VarChar(255)
  descricao String?
  inicio    DateTime?         @db.Date
  fim       DateTime?         @db.Date
  estado    Boolean           @default(false)
  materiais Material[]
  tarefas   Tarefa[]          @relation("WorkpackageTarefas")
  projeto   Projeto           @relation("ProjetoWorkpackages", fields: [projetoId], references: [id], onDelete: Cascade)
  recursos  AlocacaoRecurso[] @relation("WorkpackageRecursos")

  @@map("Workpackages")
}

model Tarefa {
  id            String       @id @default(uuid()) @db.Uuid
  workpackageId String       @map("workpackage_id") @db.Uuid
  nome          String       @db.VarChar(255)
  descricao     String?
  inicio        DateTime?    @db.Date
  fim           DateTime?    @db.Date
  estado        Boolean      @default(false)
  entregaveis   Entregavel[] @relation("TarefaEntregaveis")
  workpackage   Workpackage  @relation("WorkpackageTarefas", fields: [workpackageId], references: [id], onDelete: Cascade)

  @@map("Tarefas")
}

model Entregavel {
  id        String    @id @default(uuid()) @db.Uuid
  tarefaId  String    @map("tarefa_id") @db.Uuid
  nome      String    @db.VarChar(255)
  descricao String?
  data      DateTime? @db.Date
  estado    Boolean   @default(false)
  tarefa    Tarefa    @relation("TarefaEntregaveis", fields: [tarefaId], references: [id], onDelete: Cascade)

  @@map("Entregaveis")
}

model Material {
  id             Int          @id @default(autoincrement())
  nome           String       @db.VarChar(255)
  preco          Decimal      @db.Decimal(10, 2)
  ano_utilizacao Int
  mes            Int?         @default(1)
  quantidade     Int
  rubrica        Rubrica      @default(MATERIAIS)
  workpackageId  String?      @map("workpackage_id") @db.Uuid
  descricao      String?
  estado         Boolean      @default(false)
  workpackage    Workpackage? @relation(fields: [workpackageId], references: [id], onDelete: Cascade)

  @@map("Materiais")
}

model User {
  id                   String                         @id @default(cuid())
  name                 String?                        @db.VarChar(255)
  email                String?                        @unique @db.VarChar(255)
  emailVerified        DateTime?
  atividade            String?                        @db.VarChar(255)
  contratacao          DateTime?                      @db.Date
  username             String?                        @unique @db.VarChar(255)
  permissao            Permissao                      @default(COMUM)
  regime               Regime?                        @default(INTEGRAL)
  informacoes          String?
  contratado           Boolean                        @default(false)
  salario              Decimal?                       @default(0) @db.Decimal(10, 2)
  projetosResponsavel  Projeto[]                      @relation("ProjetosResponsavel")
  accounts             Account[]
  workpackages         AlocacaoRecurso[]
  configuracoesMensais ConfiguracaoUtilizadorMensal[]
  password             Password?
  projetoRascunhos     Rascunho[]
  sessions             Session[]
  feedbacks            Feedback[]
  notificacoes         Notificacao[]                  @relation("UserNotificacoes")

  @@map("users")
}

model ConfiguracaoMensal {
  id              String   @id @default(uuid()) @db.Uuid
  mes             Int
  ano             Int
  diasUteis       Int
  horasPotenciais Decimal  @db.Decimal(10, 2)
  jornadaDiaria   Int?     
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([mes, ano])
  @@map("configuracoes_mensais")
}

model ConfiguracaoUtilizadorMensal {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id")
  mes             Int
  ano             Int
  diasUteis       Int
  horasPotenciais Decimal  @db.Decimal(10, 2)
  jornadaDiaria   Int?     
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mes, ano])
  @@map("configuracoes_utilizador_mensais")
}

model AlocacaoRecurso {
  workpackageId String      @map("workpackage_id") @db.Uuid
  userId        String      @map("user_id")
  mes           Int
  ano           Int
  ocupacao      Decimal     @db.Decimal(4, 3)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workpackage   Workpackage @relation("WorkpackageRecursos", fields: [workpackageId], references: [id], onDelete: Cascade)

  @@id([workpackageId, userId, mes, ano])
  @@index([userId, ano, mes])
  @@index([workpackageId, ano, mes])
  @@map("alocacoes_recursos")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(uuid()) @db.Uuid

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model Password {
  id     String @id @default(cuid())
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passwords")
}

model Rascunho {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String
  titulo    String   @db.VarChar(255)
  conteudo  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rascunhos")
}

model Feedback {
  id        String         @id @default(uuid()) @db.Uuid
  userId    String         @map("user_id")
  descricao String
  estado    FeedbackEstado @default(PENDENTE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

model Notificacao {
  id             String               @id @default(uuid())
  titulo         String
  descricao      String?
  entidade       EntidadeNotificacao // Referência à entidade (ex: PROJETO, TAREFA)
  entidadeId     String? // ID da entidade relacionada
  urgencia       UrgenciaNotificacao?
  estado         EstadoNotificacao    @default(NAO_LIDA)
  destinatarioId String
  destinatario   User                 @relation("UserNotificacoes", fields: [destinatarioId], references: [id], onDelete: Cascade)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

enum ProjetoEstado {
  RASCUNHO
  PENDENTE
  APROVADO
  EM_DESENVOLVIMENTO
  CONCLUIDO
}

enum Permissao {
  ADMIN
  GESTOR
  COMUM
}

enum Regime {
  PARCIAL
  INTEGRAL
}

enum Rubrica {
  MATERIAIS
  SERVICOS_TERCEIROS
  OUTROS_SERVICOS
  DESLOCACAO_ESTADAS
  OUTROS_CUSTOS
  CUSTOS_ESTRUTURA
  INSTRUMENTOS_E_EQUIPAMENTOS
  SUBCONTRATOS
}

enum ProjetoTipo {
  STANDARD
  ATIVIDADE_ECONOMICA
}

enum FeedbackEstado {
  PENDENTE
  RESOLVIDO
}

enum EntidadeNotificacao {
  PROJETO
  WORKPACKAGE
  ENTREGAVEL
  TAREFA
  ALOCACAO
  SISTEMA
  COMENTARIO
  GERAL
  FEEDBACK
}

enum UrgenciaNotificacao {
  ALTA
  MEDIA
  BAIXA
}

enum EstadoNotificacao {
  NAO_LIDA
  LIDA
  ARQUIVADA
}
